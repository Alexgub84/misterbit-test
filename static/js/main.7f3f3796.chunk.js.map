{"version":3,"sources":["pages/Home.jsx","pages/About.jsx","pages/Contact.jsx","cmps/NavBar.jsx","cmps/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Home","className","Component","About","Contact","NavBar","to","Footer","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAEaA,EAAb,iLAEQ,OACI,yBAAKC,UAAU,aAH3B,GAA0BC,aCAbC,EAAb,iLAEQ,OACI,0CAHZ,GAA2BD,aCAdE,EAAb,iLAEQ,OACI,+CAHZ,GAA6BF,a,QCChBG,EAAb,iLAEQ,OACI,yBAAKJ,UAAU,qBACX,kBAAC,IAAD,CAASK,GAAG,KAAZ,QACA,kBAAC,IAAD,CAASA,GAAG,UAAZ,cALhB,GAA4BJ,aCDfK,EAAb,iLAEQ,OACI,yBAAKN,UAAU,yBAH3B,GAA4BC,aCQfM,EAAb,iLAMI,OACE,6BACE,gCACE,kBAAC,EAAD,OAEF,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWL,EAASM,KAAK,aAChC,kBAAC,IAAD,CAAOD,UAAWN,EAAOO,KAAK,WAC9B,kBAAC,IAAD,CAAOD,UAAWT,EAAMU,KAAK,QAGjC,gCACE,kBAAC,EAAD,YAnBV,GAAyBR,aCELS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,IAAD,KACE,kBAAC,EAAD,QAINC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f3f3796.chunk.js","sourcesContent":["import React, { Component } from 'react';\n \nexport class Home extends Component {\n    render() {\n        return (\n            <div className=\"home\">\n        \n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\n\nexport class About extends Component {\n    render() {\n        return (\n            <div>\n                About\n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\n\nexport class Contact extends Component {\n    render() {\n        return (\n            <div>\n                Contact us\n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\n\nexport class NavBar extends Component {\n    render() {\n        return (\n            <div className=\"navbar-container \">\n                <NavLink to='/'>Home</NavLink>\n                <NavLink to='/about'>About</NavLink>\n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\n\nexport class Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer-container\">\n             \n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './assets/styles/global.scss';\nimport { Home } from './pages/Home'\nimport { About } from './pages/About'\nimport { Contact } from './pages/Contact'\nimport { NavBar } from './cmps/NavBar'\nimport { Footer } from './cmps/Footer'\n\nexport class App extends Component {\n\n\n  render() {\n\n\n    return (\n      <div>\n        <header >\n          <NavBar />\n        </header>\n        <main >\n          <Switch>\n            <Route component={Contact} path=\"/contact\" />\n            <Route component={About} path=\"/about\" />\n            <Route component={Home} path=\"/\" />\n          </Switch>\n        </main>\n        <footer>\n          <Footer />\n        </footer>\n      </div >\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/global.scss'\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux'\n// import { store } from './store/store'\nimport { HashRouter as Router } from 'react-router-dom'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <Router>\n        <App />\n      </Router>\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}